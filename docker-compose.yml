# Docker Compose - Warehouse Microservice Development Environment
# Services: PostgreSQL, RabbitMQ, pgAdmin
# Usage: docker-compose up -d

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: warehouse-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: warehouse_db
      POSTGRES_USER: warehouse_user
      POSTGRES_PASSWORD: warehouse_secure_2025
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d  # Optional: SQL initialization scripts
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse_user -d warehouse_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: warehouse-rabbitmq
    restart: unless-stopped
    user: rabbitmq:rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: warehouse_secret_cookie_2025
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    networks:
      - warehouse-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # pgAdmin - PostgreSQL Web Interface (Optional, for database management)
  pgadmin:
    image: dpage/pgadmin4:8.12
    container_name: warehouse-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@warehouse.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - warehouse-network
    depends_on:
      - postgres
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    profiles:
      - tools  # Only start with: docker compose --profile tools up

  # Warehouse Application (Spring Boot Microservice)
  warehouse:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: warehouse-app
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: warehouse_db
      DB_USERNAME: warehouse_user
      DB_PASSWORD: warehouse_secure_2025
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: guest
      RABBITMQ_PASSWORD: guest
      JWT_SECRET: ${JWT_SECRET:-d2FyZWhvdXNlX2p3dF9zZWNyZXRfa2V5XzIwMjVfc2VjdXJlX3Byb2R1Y3Rpb25fa2V5}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      DEV_ADMIN_PASSWORD: ${DEV_ADMIN_PASSWORD:-Admin@2025!Secure}
      DEV_MANAGER_PASSWORD: ${DEV_MANAGER_PASSWORD:-Manager@2025!Secure}
      DEV_SALES_PASSWORD: ${DEV_SALES_PASSWORD:-Sales@2025!Secure}
    ports:
      - "8080:8080"
    networks:
      - warehouse-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1024M
        reservations:
          cpus: '1.0'
          memory: 512M
    profiles:
      - dev

  # Frontend Application (React + Vite)
  # Run in development mode with hot reload
  frontend-dev:
    image: node:20-alpine
    container_name: warehouse-frontend-dev
    restart: unless-stopped
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host"
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:8080/api
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Anonymous volume to prevent overwriting
    networks:
      - warehouse-network
    # Resource limits for frontend dev
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    profiles:
      - dev  # Only start with: docker compose --profile dev up
  
  # Frontend Production Build (Nginx)
  
  # Frontend Production Build (Nginx)
  # Build optimized frontend image with multi-stage Docker
  frontend-prod:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        VITE_API_URL: http://localhost:8080/api
    container_name: warehouse-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - warehouse-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    profiles:
      - prod

networks:
  warehouse-network:
    driver: bridge
    name: warehouse-network

volumes:
  postgres_data:
    name: warehouse_postgres_data
  rabbitmq_data:
    name: warehouse_rabbitmq_data
  rabbitmq_logs:
    name: warehouse_rabbitmq_logs
  pgadmin_data:
    name: warehouse_pgadmin_data
